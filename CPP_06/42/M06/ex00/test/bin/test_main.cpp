/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_main.cpp                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: Paradis <adil.d.pro@gmail.com>             +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/09 18:51:29 by Paradis           #+#    #+#             */
/*   Updated: 2025/07/17 18:48:54 by Paradis          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <criterion/criterion.h>
#include <criterion/internal/assert.h>
#include <criterion/logging.h>
#include <criterion/new/assert.h>
#include <criterion/redirect.h>

#include <iostream>
#include <climits>
#include <string>

#include "../../include/ScalarConverter.hpp"
#include "../../include/Utils.hpp"

void redirect_all_stdout(void)
{
    cr_redirect_stdout();
    cr_redirect_stderr();
}

Test(Utils_isPseudoLiteral, TEST_check_if_string_is_a_literal,
.init = redirect_all_stdout)
{
    {
        std::string pos_inff = "+inff";
        std::string neg_inff = "-inff";
        std::string pos_inf = "+inf";
        std::string neg_inf = "-inf";
        std::string nan = "nan";
        std::string nanf = "nanf";

        cr_assert(Utils::isPseudoLiteral(pos_inff) == true);
        cr_assert(Utils::isPseudoLiteral(neg_inff) == true);
        cr_assert(Utils::isPseudoLiteral(pos_inf) == true);
        cr_assert(Utils::isPseudoLiteral(neg_inf) == true);
        cr_assert(Utils::isPseudoLiteral(nan) == true);
        cr_assert(Utils::isPseudoLiteral(nanf) == true);
    }
}

Test(Utils_isChar, TEST_check_if_string_length_is_different_of_one,
.init = redirect_all_stdout)
{
    {
        std::string A = "a";
        std::string string = "hello";

        cr_assert(Utils::isChar(A) == true);
        cr_assert(Utils::isChar(string) == false);
    }
}

#include <iostream>
Test(Utils_isChar, TEST_should_return_true_for_any_character,
.init = redirect_all_stdout)
{
    {
        for (int i = -127; i < 128; ++i)
        {
            std::string str(1, i);
            cr_assert(Utils::isChar(str) == true);
        }
    }
}

Test(Utils_isInt, TEST_should_return_true_if_is_neg_number,
.init = redirect_all_stdout)
{
    {
        std::string str = std::to_string(-5423543);
        cr_assert(Utils::isInt(str) == true);
    }
}

Test(Utils_isInt, TEST_should_return_true_if_is_pos_number,
.init = redirect_all_stdout)
{
    {
        std::string str = std::to_string(4515243);
        cr_assert(Utils::isInt(str) == true);
    }
}

Test(Utils_isInt, TEST_should_return_false_if_its_not_integer,
.init = redirect_all_stdout)
{
    {
        std::string str = "4321jk413";
        cr_assert(Utils::isInt(str) == false);
    }
}

Test(Utils_isFloat, TEST_should_return_false_if_its_not_float,
.init = redirect_all_stdout)
{
    {
        std::string str = "12.23ffffff";

        cr_assert(Utils::isFloat(str) == false);
    }
}

Test(Utils_isFloat, TEST_should_return_true_if_its_float,
.init = redirect_all_stdout)
{
    {
        std::string str = "12.23f";
        
        cr_assert(Utils::isFloat(str) == true);
    }
}

Test(Utils_isFloat, TEST_should_return_true_if_its_neg_float,
.init = redirect_all_stdout)
{
    {
        std::string str = "-12.23f";
        
        cr_assert(Utils::isFloat(str) == true);
    }
}

Test(Utils_isDouble, TEST_should_return_false_if_its_not_double,
.init = redirect_all_stdout)
{
    {
        std::string str = "12.23gsfd";

        cr_assert(Utils::isDouble(str) == false);
    }
}

Test(Utils_isDouble, TEST_should_return_true_if_its_double,
.init = redirect_all_stdout)
{
    {
        std::string str = "12.23";
        
        cr_assert(Utils::isDouble(str) == true);
    }
}


Test(Utils_isisDouble, TEST_should_return_true_if_its_neg_double,
.init = redirect_all_stdout)
{
    {
        std::string str = "-12.23";
        
        cr_assert(Utils::isDouble(str) == true);
    }
}

Test(Utils_isChar, TEST_should_return_true_if_char_is_printable,
.init = redirect_all_stdout)
{
    {
        for (int i = -127; i < 128; ++i)
        {
            std::string str(1, i);
            if (Utils::isPrintable(str))
            {
                std::cout << str << std::endl;
                cr_assert(Utils::isPrintable(str) == true);
            }
            else
                cr_assert(Utils::isPrintable(str) == false);
        }
    }
    cr_assert_stdout_eq_str
    (
        " \n"
        "!\n"
        "\"\n"
        "#\n"
        "$\n"
        "%\n"
        "&\n"
        "'\n"
        "(\n"
        ")\n"
        "*\n"
        "+\n"
        ",\n"
        "-\n"
        ".\n"
        "/\n"
        "0\n"
        "1\n"
        "2\n"
        "3\n"
        "4\n"
        "5\n"
        "6\n"
        "7\n"
        "8\n"
        "9\n"
        ":\n"
        ";\n"
        "<\n"
        "=\n"
        ">\n"
        "?\n"
        "@\n"
        "A\n"
        "B\n"
        "C\n"
        "D\n"
        "E\n"
        "F\n"
        "G\n"
        "H\n"
        "I\n"
        "J\n"
        "K\n"
        "L\n"
        "M\n"
        "N\n"
        "O\n"
        "P\n"
        "Q\n"
        "R\n"
        "S\n"
        "T\n"
        "U\n"
        "V\n"
        "W\n"
        "X\n"
        "Y\n"
        "Z\n"
        "[\n"
        "\\\n"
        "]\n"
        "^\n"
        "_\n"
        "`\n"
        "a\n"
        "b\n"
        "c\n"
        "d\n"
        "e\n"
        "f\n"
        "g\n"
        "h\n"
        "i\n"
        "j\n"
        "k\n"
        "l\n"
        "m\n"
        "n\n"
        "o\n"
        "p\n"
        "q\n"
        "r\n"
        "s\n"
        "t\n"
        "u\n"
        "v\n"
        "w\n"
        "x\n"
        "y\n"
        "z\n"
        "{\n"
        "|\n"
        "}\n"
        "~\n"
    );
}

Test(Utils_printLiteral, TEST_printLiteral_inff,
.init = redirect_all_stdout)
{
    {
        std::string pos_inff = "+inff";
        std::string neg_inff = "-inff";

        Utils::printLiteral(pos_inff);
        Utils::printLiteral(neg_inff);

    }
    cr_assert_stdout_eq_str
    (
        "char: impossible\n"
        "int: impossible\n"
        "float: +inff\n"
        "double: +inf\n"
        "char: impossible\n"
        "int: impossible\n"
        "float: -inff\n"
        "double: -inf\n"
    );
}

Test(Utils_printLiteral, TEST_printLiteral_inf,
.init = redirect_all_stdout)
{
    {

        std::string pos_inf = "+inf";
        std::string neg_inf = "-inf";

        Utils::printLiteral(pos_inf);
        Utils::printLiteral(neg_inf);
    }
    cr_assert_stdout_eq_str
    (
        "char: impossible\n"
        "int: impossible\n"
        "float: +inff\n"
        "double: +inf\n"
        "char: impossible\n"
        "int: impossible\n"
        "float: -inff\n"
        "double: -inf\n"
    );
}

Test(Utils_printLiteral, TEST_printLiteral_nan,
.init = redirect_all_stdout)
{
    {
        std::string nan = "nan";
        std::string nanf = "nanf";

        Utils::printLiteral(nan);
        Utils::printLiteral(nanf);
    }
    cr_assert_stdout_eq_str
    (
        "char: impossible\n"
        "int: impossible\n"
        "float: nanf\n"
        "double: nan\n"
        "char: impossible\n"
        "int: impossible\n"
        "float: nanf\n"
        "double: nan\n"
    );
}

Test(Utils_printChar, TEST_try_to_print_NON_DISPLAYABLE_character,
.init = redirect_all_stdout)
{
    {
        std::string var = "\0";
        Utils::printChar(var);
    }
    cr_assert_stdout_eq_str
    (
        "char: Non displayable\n"
        "int: 0\n"
        "float: 0.0f\n"
        "double: 0.0\n"
    );
}


Test(Utils_printChar, TEST_print_character,
.init = redirect_all_stdout)
{
    {
        for (int i = -127; i < 128; ++i)
        {
            std::string str(1, i);
            Utils::printChar(str);
        }
    }
    cr_assert_stdout_eq_str
    (
        "char: Non displayable\n"
        "int: -127\n"
        "float: -127.0f\n"
        "double: -127.0\n"
        "char: Non displayable\n"
        "int: -126\n"
        "float: -126.0f\n"
        "double: -126.0\n"
        "char: Non displayable\n"
        "int: -125\n"
        "float: -125.0f\n"
        "double: -125.0\n"
        "char: Non displayable\n"
        "int: -124\n"
        "float: -124.0f\n"
        "double: -124.0\n"
        "char: Non displayable\n"
        "int: -123\n"
        "float: -123.0f\n"
        "double: -123.0\n"
        "char: Non displayable\n"
        "int: -122\n"
        "float: -122.0f\n"
        "double: -122.0\n"
        "char: Non displayable\n"
        "int: -121\n"
        "float: -121.0f\n"
        "double: -121.0\n"
        "char: Non displayable\n"
        "int: -120\n"
        "float: -120.0f\n"
        "double: -120.0\n"
        "char: Non displayable\n"
        "int: -119\n"
        "float: -119.0f\n"
        "double: -119.0\n"
        "char: Non displayable\n"
        "int: -118\n"
        "float: -118.0f\n"
        "double: -118.0\n"
        "char: Non displayable\n"
        "int: -117\n"
        "float: -117.0f\n"
        "double: -117.0\n"
        "char: Non displayable\n"
        "int: -116\n"
        "float: -116.0f\n"
        "double: -116.0\n"
        "char: Non displayable\n"
        "int: -115\n"
        "float: -115.0f\n"
        "double: -115.0\n"
        "char: Non displayable\n"
        "int: -114\n"
        "float: -114.0f\n"
        "double: -114.0\n"
        "char: Non displayable\n"
        "int: -113\n"
        "float: -113.0f\n"
        "double: -113.0\n"
        "char: Non displayable\n"
        "int: -112\n"
        "float: -112.0f\n"
        "double: -112.0\n"
        "char: Non displayable\n"
        "int: -111\n"
        "float: -111.0f\n"
        "double: -111.0\n"
        "char: Non displayable\n"
        "int: -110\n"
        "float: -110.0f\n"
        "double: -110.0\n"
        "char: Non displayable\n"
        "int: -109\n"
        "float: -109.0f\n"
        "double: -109.0\n"
        "char: Non displayable\n"
        "int: -108\n"
        "float: -108.0f\n"
        "double: -108.0\n"
        "char: Non displayable\n"
        "int: -107\n"
        "float: -107.0f\n"
        "double: -107.0\n"
        "char: Non displayable\n"
        "int: -106\n"
        "float: -106.0f\n"
        "double: -106.0\n"
        "char: Non displayable\n"
        "int: -105\n"
        "float: -105.0f\n"
        "double: -105.0\n"
        "char: Non displayable\n"
        "int: -104\n"
        "float: -104.0f\n"
        "double: -104.0\n"
        "char: Non displayable\n"
        "int: -103\n"
        "float: -103.0f\n"
        "double: -103.0\n"
        "char: Non displayable\n"
        "int: -102\n"
        "float: -102.0f\n"
        "double: -102.0\n"
        "char: Non displayable\n"
        "int: -101\n"
        "float: -101.0f\n"
        "double: -101.0\n"
        "char: Non displayable\n"
        "int: -100\n"
        "float: -100.0f\n"
        "double: -100.0\n"
        "char: Non displayable\n"
        "int: -99\n"
        "float: -99.0f\n"
        "double: -99.0\n"
        "char: Non displayable\n"
        "int: -98\n"
        "float: -98.0f\n"
        "double: -98.0\n"
        "char: Non displayable\n"
        "int: -97\n"
        "float: -97.0f\n"
        "double: -97.0\n"
        "char: Non displayable\n"
        "int: -96\n"
        "float: -96.0f\n"
        "double: -96.0\n"
        "char: Non displayable\n"
        "int: -95\n"
        "float: -95.0f\n"
        "double: -95.0\n"
        "char: Non displayable\n"
        "int: -94\n"
        "float: -94.0f\n"
        "double: -94.0\n"
        "char: Non displayable\n"
        "int: -93\n"
        "float: -93.0f\n"
        "double: -93.0\n"
        "char: Non displayable\n"
        "int: -92\n"
        "float: -92.0f\n"
        "double: -92.0\n"
        "char: Non displayable\n"
        "int: -91\n"
        "float: -91.0f\n"
        "double: -91.0\n"
        "char: Non displayable\n"
        "int: -90\n"
        "float: -90.0f\n"
        "double: -90.0\n"
        "char: Non displayable\n"
        "int: -89\n"
        "float: -89.0f\n"
        "double: -89.0\n"
        "char: Non displayable\n"
        "int: -88\n"
        "float: -88.0f\n"
        "double: -88.0\n"
        "char: Non displayable\n"
        "int: -87\n"
        "float: -87.0f\n"
        "double: -87.0\n"
        "char: Non displayable\n"
        "int: -86\n"
        "float: -86.0f\n"
        "double: -86.0\n"
        "char: Non displayable\n"
        "int: -85\n"
        "float: -85.0f\n"
        "double: -85.0\n"
        "char: Non displayable\n"
        "int: -84\n"
        "float: -84.0f\n"
        "double: -84.0\n"
        "char: Non displayable\n"
        "int: -83\n"
        "float: -83.0f\n"
        "double: -83.0\n"
        "char: Non displayable\n"
        "int: -82\n"
        "float: -82.0f\n"
        "double: -82.0\n"
        "char: Non displayable\n"
        "int: -81\n"
        "float: -81.0f\n"
        "double: -81.0\n"
        "char: Non displayable\n"
        "int: -80\n"
        "float: -80.0f\n"
        "double: -80.0\n"
        "char: Non displayable\n"
        "int: -79\n"
        "float: -79.0f\n"
        "double: -79.0\n"
        "char: Non displayable\n"
        "int: -78\n"
        "float: -78.0f\n"
        "double: -78.0\n"
        "char: Non displayable\n"
        "int: -77\n"
        "float: -77.0f\n"
        "double: -77.0\n"
        "char: Non displayable\n"
        "int: -76\n"
        "float: -76.0f\n"
        "double: -76.0\n"
        "char: Non displayable\n"
        "int: -75\n"
        "float: -75.0f\n"
        "double: -75.0\n"
        "char: Non displayable\n"
        "int: -74\n"
        "float: -74.0f\n"
        "double: -74.0\n"
        "char: Non displayable\n"
        "int: -73\n"
        "float: -73.0f\n"
        "double: -73.0\n"
        "char: Non displayable\n"
        "int: -72\n"
        "float: -72.0f\n"
        "double: -72.0\n"
        "char: Non displayable\n"
        "int: -71\n"
        "float: -71.0f\n"
        "double: -71.0\n"
        "char: Non displayable\n"
        "int: -70\n"
        "float: -70.0f\n"
        "double: -70.0\n"
        "char: Non displayable\n"
        "int: -69\n"
        "float: -69.0f\n"
        "double: -69.0\n"
        "char: Non displayable\n"
        "int: -68\n"
        "float: -68.0f\n"
        "double: -68.0\n"
        "char: Non displayable\n"
        "int: -67\n"
        "float: -67.0f\n"
        "double: -67.0\n"
        "char: Non displayable\n"
        "int: -66\n"
        "float: -66.0f\n"
        "double: -66.0\n"
        "char: Non displayable\n"
        "int: -65\n"
        "float: -65.0f\n"
        "double: -65.0\n"
        "char: Non displayable\n"
        "int: -64\n"
        "float: -64.0f\n"
        "double: -64.0\n"
        "char: Non displayable\n"
        "int: -63\n"
        "float: -63.0f\n"
        "double: -63.0\n"
        "char: Non displayable\n"
        "int: -62\n"
        "float: -62.0f\n"
        "double: -62.0\n"
        "char: Non displayable\n"
        "int: -61\n"
        "float: -61.0f\n"
        "double: -61.0\n"
        "char: Non displayable\n"
        "int: -60\n"
        "float: -60.0f\n"
        "double: -60.0\n"
        "char: Non displayable\n"
        "int: -59\n"
        "float: -59.0f\n"
        "double: -59.0\n"
        "char: Non displayable\n"
        "int: -58\n"
        "float: -58.0f\n"
        "double: -58.0\n"
        "char: Non displayable\n"
        "int: -57\n"
        "float: -57.0f\n"
        "double: -57.0\n"
        "char: Non displayable\n"
        "int: -56\n"
        "float: -56.0f\n"
        "double: -56.0\n"
        "char: Non displayable\n"
        "int: -55\n"
        "float: -55.0f\n"
        "double: -55.0\n"
        "char: Non displayable\n"
        "int: -54\n"
        "float: -54.0f\n"
        "double: -54.0\n"
        "char: Non displayable\n"
        "int: -53\n"
        "float: -53.0f\n"
        "double: -53.0\n"
        "char: Non displayable\n"
        "int: -52\n"
        "float: -52.0f\n"
        "double: -52.0\n"
        "char: Non displayable\n"
        "int: -51\n"
        "float: -51.0f\n"
        "double: -51.0\n"
        "char: Non displayable\n"
        "int: -50\n"
        "float: -50.0f\n"
        "double: -50.0\n"
        "char: Non displayable\n"
        "int: -49\n"
        "float: -49.0f\n"
        "double: -49.0\n"
        "char: Non displayable\n"
        "int: -48\n"
        "float: -48.0f\n"
        "double: -48.0\n"
        "char: Non displayable\n"
        "int: -47\n"
        "float: -47.0f\n"
        "double: -47.0\n"
        "char: Non displayable\n"
        "int: -46\n"
        "float: -46.0f\n"
        "double: -46.0\n"
        "char: Non displayable\n"
        "int: -45\n"
        "float: -45.0f\n"
        "double: -45.0\n"
        "char: Non displayable\n"
        "int: -44\n"
        "float: -44.0f\n"
        "double: -44.0\n"
        "char: Non displayable\n"
        "int: -43\n"
        "float: -43.0f\n"
        "double: -43.0\n"
        "char: Non displayable\n"
        "int: -42\n"
        "float: -42.0f\n"
        "double: -42.0\n"
        "char: Non displayable\n"
        "int: -41\n"
        "float: -41.0f\n"
        "double: -41.0\n"
        "char: Non displayable\n"
        "int: -40\n"
        "float: -40.0f\n"
        "double: -40.0\n"
        "char: Non displayable\n"
        "int: -39\n"
        "float: -39.0f\n"
        "double: -39.0\n"
        "char: Non displayable\n"
        "int: -38\n"
        "float: -38.0f\n"
        "double: -38.0\n"
        "char: Non displayable\n"
        "int: -37\n"
        "float: -37.0f\n"
        "double: -37.0\n"
        "char: Non displayable\n"
        "int: -36\n"
        "float: -36.0f\n"
        "double: -36.0\n"
        "char: Non displayable\n"
        "int: -35\n"
        "float: -35.0f\n"
        "double: -35.0\n"
        "char: Non displayable\n"
        "int: -34\n"
        "float: -34.0f\n"
        "double: -34.0\n"
        "char: Non displayable\n"
        "int: -33\n"
        "float: -33.0f\n"
        "double: -33.0\n"
        "char: Non displayable\n"
        "int: -32\n"
        "float: -32.0f\n"
        "double: -32.0\n"
        "char: Non displayable\n"
        "int: -31\n"
        "float: -31.0f\n"
        "double: -31.0\n"
        "char: Non displayable\n"
        "int: -30\n"
        "float: -30.0f\n"
        "double: -30.0\n"
        "char: Non displayable\n"
        "int: -29\n"
        "float: -29.0f\n"
        "double: -29.0\n"
        "char: Non displayable\n"
        "int: -28\n"
        "float: -28.0f\n"
        "double: -28.0\n"
        "char: Non displayable\n"
        "int: -27\n"
        "float: -27.0f\n"
        "double: -27.0\n"
        "char: Non displayable\n"
        "int: -26\n"
        "float: -26.0f\n"
        "double: -26.0\n"
        "char: Non displayable\n"
        "int: -25\n"
        "float: -25.0f\n"
        "double: -25.0\n"
        "char: Non displayable\n"
        "int: -24\n"
        "float: -24.0f\n"
        "double: -24.0\n"
        "char: Non displayable\n"
        "int: -23\n"
        "float: -23.0f\n"
        "double: -23.0\n"
        "char: Non displayable\n"
        "int: -22\n"
        "float: -22.0f\n"
        "double: -22.0\n"
        "char: Non displayable\n"
        "int: -21\n"
        "float: -21.0f\n"
        "double: -21.0\n"
        "char: Non displayable\n"
        "int: -20\n"
        "float: -20.0f\n"
        "double: -20.0\n"
        "char: Non displayable\n"
        "int: -19\n"
        "float: -19.0f\n"
        "double: -19.0\n"
        "char: Non displayable\n"
        "int: -18\n"
        "float: -18.0f\n"
        "double: -18.0\n"
        "char: Non displayable\n"
        "int: -17\n"
        "float: -17.0f\n"
        "double: -17.0\n"
        "char: Non displayable\n"
        "int: -16\n"
        "float: -16.0f\n"
        "double: -16.0\n"
        "char: Non displayable\n"
        "int: -15\n"
        "float: -15.0f\n"
        "double: -15.0\n"
        "char: Non displayable\n"
        "int: -14\n"
        "float: -14.0f\n"
        "double: -14.0\n"
        "char: Non displayable\n"
        "int: -13\n"
        "float: -13.0f\n"
        "double: -13.0\n"
        "char: Non displayable\n"
        "int: -12\n"
        "float: -12.0f\n"
        "double: -12.0\n"
        "char: Non displayable\n"
        "int: -11\n"
        "float: -11.0f\n"
        "double: -11.0\n"
        "char: Non displayable\n"
        "int: -10\n"
        "float: -10.0f\n"
        "double: -10.0\n"
        "char: Non displayable\n"
        "int: -9\n"
        "float: -9.0f\n"
        "double: -9.0\n"
        "char: Non displayable\n"
        "int: -8\n"
        "float: -8.0f\n"
        "double: -8.0\n"
        "char: Non displayable\n"
        "int: -7\n"
        "float: -7.0f\n"
        "double: -7.0\n"
        "char: Non displayable\n"
        "int: -6\n"
        "float: -6.0f\n"
        "double: -6.0\n"
        "char: Non displayable\n"
        "int: -5\n"
        "float: -5.0f\n"
        "double: -5.0\n"
        "char: Non displayable\n"
        "int: -4\n"
        "float: -4.0f\n"
        "double: -4.0\n"
        "char: Non displayable\n"
        "int: -3\n"
        "float: -3.0f\n"
        "double: -3.0\n"
        "char: Non displayable\n"
        "int: -2\n"
        "float: -2.0f\n"
        "double: -2.0\n"
        "char: Non displayable\n"
        "int: -1\n"
        "float: -1.0f\n"
        "double: -1.0\n"
        "char: Non displayable\n"
        "int: 0\n"
        "float: 0.0f\n"
        "double: 0.0\n"
        "char: Non displayable\n"
        "int: 1\n"
        "float: 1.0f\n"
        "double: 1.0\n"
        "char: Non displayable\n"
        "int: 2\n"
        "float: 2.0f\n"
        "double: 2.0\n"
        "char: Non displayable\n"
        "int: 3\n"
        "float: 3.0f\n"
        "double: 3.0\n"
        "char: Non displayable\n"
        "int: 4\n"
        "float: 4.0f\n"
        "double: 4.0\n"
        "char: Non displayable\n"
        "int: 5\n"
        "float: 5.0f\n"
        "double: 5.0\n"
        "char: Non displayable\n"
        "int: 6\n"
        "float: 6.0f\n"
        "double: 6.0\n"
        "char: Non displayable\n"
        "int: 7\n"
        "float: 7.0f\n"
        "double: 7.0\n"
        "char: Non displayable\n"
        "int: 8\n"
        "float: 8.0f\n"
        "double: 8.0\n"
        "char: Non displayable\n"
        "int: 9\n"
        "float: 9.0f\n"
        "double: 9.0\n"
        "char: Non displayable\n"
        "int: 10\n"
        "float: 10.0f\n"
        "double: 10.0\n"
        "char: Non displayable\n"
        "int: 11\n"
        "float: 11.0f\n"
        "double: 11.0\n"
        "char: Non displayable\n"
        "int: 12\n"
        "float: 12.0f\n"
        "double: 12.0\n"
        "char: Non displayable\n"
        "int: 13\n"
        "float: 13.0f\n"
        "double: 13.0\n"
        "char: Non displayable\n"
        "int: 14\n"
        "float: 14.0f\n"
        "double: 14.0\n"
        "char: Non displayable\n"
        "int: 15\n"
        "float: 15.0f\n"
        "double: 15.0\n"
        "char: Non displayable\n"
        "int: 16\n"
        "float: 16.0f\n"
        "double: 16.0\n"
        "char: Non displayable\n"
        "int: 17\n"
        "float: 17.0f\n"
        "double: 17.0\n"
        "char: Non displayable\n"
        "int: 18\n"
        "float: 18.0f\n"
        "double: 18.0\n"
        "char: Non displayable\n"
        "int: 19\n"
        "float: 19.0f\n"
        "double: 19.0\n"
        "char: Non displayable\n"
        "int: 20\n"
        "float: 20.0f\n"
        "double: 20.0\n"
        "char: Non displayable\n"
        "int: 21\n"
        "float: 21.0f\n"
        "double: 21.0\n"
        "char: Non displayable\n"
        "int: 22\n"
        "float: 22.0f\n"
        "double: 22.0\n"
        "char: Non displayable\n"
        "int: 23\n"
        "float: 23.0f\n"
        "double: 23.0\n"
        "char: Non displayable\n"
        "int: 24\n"
        "float: 24.0f\n"
        "double: 24.0\n"
        "char: Non displayable\n"
        "int: 25\n"
        "float: 25.0f\n"
        "double: 25.0\n"
        "char: Non displayable\n"
        "int: 26\n"
        "float: 26.0f\n"
        "double: 26.0\n"
        "char: Non displayable\n"
        "int: 27\n"
        "float: 27.0f\n"
        "double: 27.0\n"
        "char: Non displayable\n"
        "int: 28\n"
        "float: 28.0f\n"
        "double: 28.0\n"
        "char: Non displayable\n"
        "int: 29\n"
        "float: 29.0f\n"
        "double: 29.0\n"
        "char: Non displayable\n"
        "int: 30\n"
        "float: 30.0f\n"
        "double: 30.0\n"
        "char: Non displayable\n"
        "int: 31\n"
        "float: 31.0f\n"
        "double: 31.0\n"
        "char: ' '\n"
        "int: 32\n"
        "float: 32.0f\n"
        "double: 32.0\n"
        "char: '!'\n"
        "int: 33\n"
        "float: 33.0f\n"
        "double: 33.0\n"
        "char: '\"'\n"
        "int: 34\n"
        "float: 34.0f\n"
        "double: 34.0\n"
        "char: '#'\n"
        "int: 35\n"
        "float: 35.0f\n"
        "double: 35.0\n"
        "char: '$'\n"
        "int: 36\n"
        "float: 36.0f\n"
        "double: 36.0\n"
        "char: '%'\n"
        "int: 37\n"
        "float: 37.0f\n"
        "double: 37.0\n"
        "char: '&'\n"
        "int: 38\n"
        "float: 38.0f\n"
        "double: 38.0\n"
        "char: '''\n"
        "int: 39\n"
        "float: 39.0f\n"
        "double: 39.0\n"
        "char: '('\n"
        "int: 40\n"
        "float: 40.0f\n"
        "double: 40.0\n"
        "char: ')'\n"
        "int: 41\n"
        "float: 41.0f\n"
        "double: 41.0\n"
        "char: '*'\n"
        "int: 42\n"
        "float: 42.0f\n"
        "double: 42.0\n"
        "char: '+'\n"
        "int: 43\n"
        "float: 43.0f\n"
        "double: 43.0\n"
        "char: ','\n"
        "int: 44\n"
        "float: 44.0f\n"
        "double: 44.0\n"
        "char: '-'\n"
        "int: 45\n"
        "float: 45.0f\n"
        "double: 45.0\n"
        "char: '.'\n"
        "int: 46\n"
        "float: 46.0f\n"
        "double: 46.0\n"
        "char: '/'\n"
        "int: 47\n"
        "float: 47.0f\n"
        "double: 47.0\n"
        "char: '0'\n"
        "int: 48\n"
        "float: 48.0f\n"
        "double: 48.0\n"
        "char: '1'\n"
        "int: 49\n"
        "float: 49.0f\n"
        "double: 49.0\n"
        "char: '2'\n"
        "int: 50\n"
        "float: 50.0f\n"
        "double: 50.0\n"
        "char: '3'\n"
        "int: 51\n"
        "float: 51.0f\n"
        "double: 51.0\n"
        "char: '4'\n"
        "int: 52\n"
        "float: 52.0f\n"
        "double: 52.0\n"
        "char: '5'\n"
        "int: 53\n"
        "float: 53.0f\n"
        "double: 53.0\n"
        "char: '6'\n"
        "int: 54\n"
        "float: 54.0f\n"
        "double: 54.0\n"
        "char: '7'\n"
        "int: 55\n"
        "float: 55.0f\n"
        "double: 55.0\n"
        "char: '8'\n"
        "int: 56\n"
        "float: 56.0f\n"
        "double: 56.0\n"
        "char: '9'\n"
        "int: 57\n"
        "float: 57.0f\n"
        "double: 57.0\n"
        "char: ':'\n"
        "int: 58\n"
        "float: 58.0f\n"
        "double: 58.0\n"
        "char: ';'\n"
        "int: 59\n"
        "float: 59.0f\n"
        "double: 59.0\n"
        "char: '<'\n"
        "int: 60\n"
        "float: 60.0f\n"
        "double: 60.0\n"
        "char: '='\n"
        "int: 61\n"
        "float: 61.0f\n"
        "double: 61.0\n"
        "char: '>'\n"
        "int: 62\n"
        "float: 62.0f\n"
        "double: 62.0\n"
        "char: '?'\n"
        "int: 63\n"
        "float: 63.0f\n"
        "double: 63.0\n"
        "char: '@'\n"
        "int: 64\n"
        "float: 64.0f\n"
        "double: 64.0\n"
        "char: 'A'\n"
        "int: 65\n"
        "float: 65.0f\n"
        "double: 65.0\n"
        "char: 'B'\n"
        "int: 66\n"
        "float: 66.0f\n"
        "double: 66.0\n"
        "char: 'C'\n"
        "int: 67\n"
        "float: 67.0f\n"
        "double: 67.0\n"
        "char: 'D'\n"
        "int: 68\n"
        "float: 68.0f\n"
        "double: 68.0\n"
        "char: 'E'\n"
        "int: 69\n"
        "float: 69.0f\n"
        "double: 69.0\n"
        "char: 'F'\n"
        "int: 70\n"
        "float: 70.0f\n"
        "double: 70.0\n"
        "char: 'G'\n"
        "int: 71\n"
        "float: 71.0f\n"
        "double: 71.0\n"
        "char: 'H'\n"
        "int: 72\n"
        "float: 72.0f\n"
        "double: 72.0\n"
        "char: 'I'\n"
        "int: 73\n"
        "float: 73.0f\n"
        "double: 73.0\n"
        "char: 'J'\n"
        "int: 74\n"
        "float: 74.0f\n"
        "double: 74.0\n"
        "char: 'K'\n"
        "int: 75\n"
        "float: 75.0f\n"
        "double: 75.0\n"
        "char: 'L'\n"
        "int: 76\n"
        "float: 76.0f\n"
        "double: 76.0\n"
        "char: 'M'\n"
        "int: 77\n"
        "float: 77.0f\n"
        "double: 77.0\n"
        "char: 'N'\n"
        "int: 78\n"
        "float: 78.0f\n"
        "double: 78.0\n"
        "char: 'O'\n"
        "int: 79\n"
        "float: 79.0f\n"
        "double: 79.0\n"
        "char: 'P'\n"
        "int: 80\n"
        "float: 80.0f\n"
        "double: 80.0\n"
        "char: 'Q'\n"
        "int: 81\n"
        "float: 81.0f\n"
        "double: 81.0\n"
        "char: 'R'\n"
        "int: 82\n"
        "float: 82.0f\n"
        "double: 82.0\n"
        "char: 'S'\n"
        "int: 83\n"
        "float: 83.0f\n"
        "double: 83.0\n"
        "char: 'T'\n"
        "int: 84\n"
        "float: 84.0f\n"
        "double: 84.0\n"
        "char: 'U'\n"
        "int: 85\n"
        "float: 85.0f\n"
        "double: 85.0\n"
        "char: 'V'\n"
        "int: 86\n"
        "float: 86.0f\n"
        "double: 86.0\n"
        "char: 'W'\n"
        "int: 87\n"
        "float: 87.0f\n"
        "double: 87.0\n"
        "char: 'X'\n"
        "int: 88\n"
        "float: 88.0f\n"
        "double: 88.0\n"
        "char: 'Y'\n"
        "int: 89\n"
        "float: 89.0f\n"
        "double: 89.0\n"
        "char: 'Z'\n"
        "int: 90\n"
        "float: 90.0f\n"
        "double: 90.0\n"
        "char: '['\n"
        "int: 91\n"
        "float: 91.0f\n"
        "double: 91.0\n"
        "char: '\\'\n"
        "int: 92\n"
        "float: 92.0f\n"
        "double: 92.0\n"
       "char: ']'\n"
        "int: 93\n"
        "float: 93.0f\n"
        "double: 93.0\n"
        "char: '^'\n"
        "int: 94\n"
        "float: 94.0f\n"
        "double: 94.0\n"
        "char: '_'\n"
        "int: 95\n"
        "float: 95.0f\n"
        "double: 95.0\n"
        "char: '`'\n"
        "int: 96\n"
        "float: 96.0f\n"
        "double: 96.0\n"
        "char: 'a'\n"
        "int: 97\n"
        "float: 97.0f\n"
        "double: 97.0\n"
        "char: 'b'\n"
        "int: 98\n"
        "float: 98.0f\n"
        "double: 98.0\n"
        "char: 'c'\n"
        "int: 99\n"
        "float: 99.0f\n"
        "double: 99.0\n"
        "char: 'd'\n"
        "int: 100\n"
        "float: 100.0f\n"
        "double: 100.0\n"
        "char: 'e'\n"
        "int: 101\n"
        "float: 101.0f\n"
        "double: 101.0\n"
        "char: 'f'\n"
        "int: 102\n"
        "float: 102.0f\n"
        "double: 102.0\n"
        "char: 'g'\n"
        "int: 103\n"
        "float: 103.0f\n"
        "double: 103.0\n"
        "char: 'h'\n"
        "int: 104\n"
        "float: 104.0f\n"
        "double: 104.0\n"
        "char: 'i'\n"
        "int: 105\n"
        "float: 105.0f\n"
        "double: 105.0\n"
        "char: 'j'\n"
        "int: 106\n"
        "float: 106.0f\n"
        "double: 106.0\n"
        "char: 'k'\n"
        "int: 107\n"
        "float: 107.0f\n"
        "double: 107.0\n"
        "char: 'l'\n"
        "int: 108\n"
        "float: 108.0f\n"
        "double: 108.0\n"
        "char: 'm'\n"
        "int: 109\n"
        "float: 109.0f\n"
        "double: 109.0\n"
        "char: 'n'\n"
        "int: 110\n"
        "float: 110.0f\n"
        "double: 110.0\n"
        "char: 'o'\n"
        "int: 111\n"
        "float: 111.0f\n"
        "double: 111.0\n"
        "char: 'p'\n"
        "int: 112\n"
        "float: 112.0f\n"
        "double: 112.0\n"
        "char: 'q'\n"
        "int: 113\n"
        "float: 113.0f\n"
        "double: 113.0\n"
        "char: 'r'\n"
        "int: 114\n"
        "float: 114.0f\n"
        "double: 114.0\n"
        "char: 's'\n"
        "int: 115\n"
        "float: 115.0f\n"
        "double: 115.0\n"
        "char: 't'\n"
        "int: 116\n"
        "float: 116.0f\n"
        "double: 116.0\n"
        "char: 'u'\n"
        "int: 117\n"
        "float: 117.0f\n"
        "double: 117.0\n"
        "char: 'v'\n"
        "int: 118\n"
        "float: 118.0f\n"
        "double: 118.0\n"
        "char: 'w'\n"
        "int: 119\n"
        "float: 119.0f\n"
        "double: 119.0\n"
        "char: 'x'\n"
        "int: 120\n"
        "float: 120.0f\n"
        "double: 120.0\n"
        "char: 'y'\n"
        "int: 121\n"
        "float: 121.0f\n"
        "double: 121.0\n"
        "char: 'z'\n"
        "int: 122\n"
        "float: 122.0f\n"
        "double: 122.0\n"
        "char: '{'\n"
        "int: 123\n"
        "float: 123.0f\n"
        "double: 123.0\n"
        "char: '|'\n"
        "int: 124\n"
        "float: 124.0f\n"
        "double: 124.0\n"
        "char: '}'\n"
        "int: 125\n"
        "float: 125.0f\n"
        "double: 125.0\n"
        "char: '~'\n"
        "int: 126\n"
        "float: 126.0f\n"
        "double: 126.0\n"
        "char: Non displayable\n"
        "int: 127\n"
        "float: 127.0f\n"
        "double: 127.0\n"
    );
}

///////////////////////////////////////////////////////////////////////////////
//                            TEST main                                      //
///////////////////////////////////////////////////////////////////////////////
Test(main, Test_main, .init = redirect_all_stdout)
{
    {
    }
    // cr_assert_stdout_eq_str
    // (

    // );
}